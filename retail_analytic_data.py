# -*- coding: utf-8 -*-
"""retail_analytic_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XUQOTdIC0_0-ApvCsNbzcbmP7H16oNGS
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from xgboost import XGBRegressor

df=pd.read_csv("Supermart Grocery Sales.csv")
print(df.head())

print(df.shape)
print(df.columns)
print(df.info())
print(df.describe())

print(df.isnull().sum())

df = df.dropna()

df['Order Date'] = pd.to_datetime(df['Order Date'], format='mixed')

sns.boxplot(x=df['Profit'])
plt.title(' (Profit) ')
plt.show()

Q1 = df['Profit'].quantile(0.25)
Q3 = df['Profit'].quantile(0.75)
IQR = Q3 - Q1

df = df[~((df['Profit'] < (Q1 - 1.5 * IQR)) | (df['Profit'] > (Q3 + 1.5 * IQR)))]

for col in ['Category', 'Sub Category', 'Region']:
    df[col] = df[col].str.strip().str.title()

print("Repeated Column number:", df.duplicated().sum())
df = df.drop_duplicates()

df['Month'] = df['Order Date'].dt.month
df['Weekday'] = df['Order Date'].dt.weekday

df.groupby('City')['Sales'].sum().sort_values(ascending=False).head(10).plot(kind='bar', title='Top Cities by Sales ')

df.groupby('Month')['Sales'].sum().plot(kind='line', marker='o', title='Monthly Sales')

df.groupby('Category')[['Sales', 'Profit']].sum().plot(kind='bar', title='Sales and Profit by Category')

print(df.columns)

# 5. Model Training with evaluation output
def train_models(df):
    y = df['Profit']
    features = ['Sales', 'Sales_per_Discount', 'Day', 'Month', 'Weekday', 'Discount']
    X = df[features]

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)


    # Linear Regression
    lr = LinearRegression()
    lr.fit(X_train, y_train)
    pred_lr_train = lr.predict(X_train)
    pred_lr_test = lr.predict(X_test)

    print("\nüìä Linear Regression")
    print("Train R¬≤ Score:", r2_score(y_train, pred_lr_train))
    print("Test R¬≤ Score :", r2_score(y_test, pred_lr_test))

    # Random Forest
    rf = RandomForestRegressor(n_estimators=100, random_state=42)
    rf.fit(X_train, y_train)
    pred_rf_test = rf.predict(X_test)

    print("\nüå≤ Random Forest Regressor")
    print("Test R¬≤ Score :", r2_score(y_test, pred_rf_test))

    # XGBoost
    xgb = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
    xgb.fit(X_train, y_train)
    pred_xgb_test = xgb.predict(X_test)

    print("\n‚ö° XGBoost Regressor")
    print("Test R¬≤ Score :", r2_score(y_test, pred_xgb_test))

    # Visual Comparison (Example)
    plt.figure(figsize=(8, 5))
    plt.scatter(y_test, pred_rf_test, alpha=0.5, label='Random Forest')
    plt.scatter(y_test, pred_xgb_test, alpha=0.5, label='XGBoost', color='red')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
    plt.xlabel('Actual Profit')
    plt.ylabel('Predicted Profit')
    plt.title('Actual vs Predicted Profit')
    plt.legend()
    plt.tight_layout()
    plt.show()

    return X_train, X_test, y_train, y_test

# 6. Grid Search + Evaluation for Best RF Model
def optimize_random_forest(X_train, X_test, y_train, y_test):
    param_grid = {
        'n_estimators': [100, 200],
        'max_depth': [None, 10],
        'min_samples_split': [2, 5],
        'min_samples_leaf': [1, 2],
        'max_features': ['sqrt']
    }

    rf = RandomForestRegressor(random_state=42)
    grid_search = GridSearchCV(rf, param_grid, cv=3, n_jobs=-1, scoring='r2', verbose=1)
    grid_search.fit(X_train, y_train)

    best_rf = grid_search.best_estimator_
    predictions = best_rf.predict(X_test)

    print("\nüîç GridSearchCV Results")
    print("Best Parameters:", grid_search.best_params_)
    print("Test R¬≤ Score with Optimized RF:", r2_score(y_test, predictions))

    # Visualize Predictions vs Actual
    plt.figure(figsize=(8, 5))
    plt.scatter(y_test, predictions, alpha=0.5, color='green')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
    plt.xlabel("Actual Profit")
    plt.ylabel("Predicted Profit")
    plt.title("Optimized Random Forest: Actual vs Predicted")
    plt.tight_layout()
    plt.show()